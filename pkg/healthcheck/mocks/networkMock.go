// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-cli/pkg/healthcheck (interfaces: NetworkInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNetworkInterface is a mock of NetworkInterface interface.
type MockNetworkInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkInterfaceMockRecorder
}

// MockNetworkInterfaceMockRecorder is the mock recorder for MockNetworkInterface.
type MockNetworkInterfaceMockRecorder struct {
	mock *MockNetworkInterface
}

// NewMockNetworkInterface creates a new mock instance.
func NewMockNetworkInterface(ctrl *gomock.Controller) *MockNetworkInterface {
	mock := &MockNetworkInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkInterface) EXPECT() *MockNetworkInterfaceMockRecorder {
	return m.recorder
}

// Interfaces mocks base method.
func (m *MockNetworkInterface) Interfaces() ([]net.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interfaces")
	ret0, _ := ret[0].([]net.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Interfaces indicates an expected call of Interfaces.
func (mr *MockNetworkInterfaceMockRecorder) Interfaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interfaces", reflect.TypeOf((*MockNetworkInterface)(nil).Interfaces))
}
